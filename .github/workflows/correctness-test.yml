name: Correctness Test for goid

on:
  workflow_dispatch:

jobs:
  test-linux-amd64:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Build
        run: go build -v ./...

      - name: Run tests + benches (JSON)
        run: go test -bench=. -json ./... > results.json

      - name: Debug - Show JSON output
        run: |
          echo "=== JSON test output ==="
          cat results.json
          echo "=== End JSON output ==="

      - name: Extract bench results
        run: |
          jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
          echo "=== Bench TSV output ==="
          cat bench.tsv
          echo "=== End Bench TSV ==="

      - name: Extract test results
        run: |
          jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-linux-amd64-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  test-linux-arm64:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']

    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Build
        run: go build -v ./...

      - name: Run tests + benches (JSON)
        run: go test -bench=. -json ./... > results.json

      - name: Debug - Show JSON output
        run: |
          echo "=== JSON test output ==="
          cat results.json
          echo "=== End JSON output ==="

      - name: Extract bench results
        run: |
          jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
          echo "=== Bench TSV output ==="
          cat bench.tsv
          echo "=== End Bench TSV ==="

      - name: Extract test results
        run: |
          jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-linux-arm64-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  test-linux-armv7:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21.13', '1.22.12', '1.23.10', '1.24.4'] # need patch versions for armv7 downloads

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install QEMU
        uses: docker/setup-qemu-action@v3

      - name: Run tests (armv7 emulated)
        uses: uraimo/run-on-arch-action@v3
        with:
          arch: armv7
          distro: bookworm
          dockerRunArgs: |
            --volume "${PWD}:/go/src/app"
          run: |
            apt update && apt install -y wget jq
            wget https://golang.org/dl/go${{ matrix.go-version }}.linux-armv6l.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go${{ matrix.go-version }}.linux-armv6l.tar.gz
            export PATH=/usr/local/go/bin:$PATH
            export GOARCH=arm
            export GOARM=7
            cd /go/src/app
            go test -bench=. -json ./... > results.json
            echo "=== JSON test output ==="
            cat results.json
            echo "=== End JSON output ==="
            jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
            echo "=== Bench TSV output ==="
            cat bench.tsv
            echo "=== End Bench TSV ==="
            jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-linux-armv7-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  test-darwin-amd64:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']

    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Build
        run: go build -v ./...

      - name: Run tests + benches (JSON)
        run: go test -bench=. -json ./... > results.json

      - name: Debug - Show JSON output
        run: |
          echo "=== JSON test output ==="
          cat results.json
          echo "=== End JSON output ==="

      - name: Extract bench results
        run: |
          jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
          echo "=== Bench TSV output ==="
          cat bench.tsv
          echo "=== End Bench TSV ==="

      - name: Extract test results
        run: |
          jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-darwin-amd64-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  test-darwin-arm64:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Build
        run: go build -v ./...

      - name: Run tests + benches (JSON)
        run: go test -bench=. -json ./... > results.json

      - name: Debug - Show JSON output
        run: |
          echo "=== JSON test output ==="
          cat results.json
          echo "=== End JSON output ==="

      - name: Extract bench results
        run: |
          jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
          echo "=== Bench TSV output ==="
          cat bench.tsv
          echo "=== End Bench TSV ==="

      - name: Extract test results
        run: |
          jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-darwin-arm64-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  test-windows:
    strategy:
      fail-fast: false
      matrix:
        go-version: ['1.21', '1.22', '1.23', '1.24']
        arch: [amd64, 386]

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Configure GOARCH
        run: echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Build
        run: go build -v ./...

      - name: Run tests + benches (JSON)
        run: go test -bench="." -json ./... > results.json

      - name: Debug - Show JSON output
        run: |
          Write-Host "=== JSON test output ==="
          type results.json
          Write-Host "=== End JSON output ==="

      - name: Extract bench results
        run: |
          jq -r 'select(.Action=="output" and .Output and (.Output | test("^Benchmark.*\\t.*\\t.*ns/op"))) | [.Package, (.Output | capture("^(?<bench>\\S+)\\s+") | .bench), (.Output | capture(".*\\t.*\\t\\s*(?<nsop>[0-9.]+)\\s*ns/op") | .nsop)] | @tsv' results.json > bench.tsv
          Write-Host "=== Bench TSV output ==="
          type bench.tsv
          Write-Host "=== End Bench TSV ==="

      - name: Extract test results
        run: |
          jq -r 'select((.Action=="pass" or .Action=="fail") and .Test) | [.Package, .Test, .Action, (.Elapsed|tostring)] | @tsv' results.json > tests.tsv

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: results-windows-${{ matrix.arch }}-Go${{ matrix.go-version }}
          path: |
            bench.tsv
            tests.tsv

  aggregate-results:
    name: Aggregate Bench & Test Results
    runs-on: ubuntu-latest
    needs:
      - test-linux-amd64
      - test-linux-arm64
      - test-linux-armv7
      - test-darwin-amd64
      - test-darwin-arm64
      - test-windows
    steps:
      - name: Download all matrix artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine bench results
        run: |
          echo -e "os\tarch\tgo-version\tpackage\tbenchmark\tns/op" > combined-bench.tsv
          for file in artifacts/**/bench.tsv; do
            # derive metadata from artifact folder name, e.g. results-linux-amd64-Go1.21
            meta=$(dirname "$file" | sed 's|artifacts/results-||')
            os=$(echo $meta | cut -d- -f1)
            arch=$(echo $meta | cut -d- -f2)
            gov=$(echo $meta | cut -d- -f3 | sed 's/Go//')
            tail -n +1 "$file" | tr -d '\r' | \
              awk -v os="$os" -v arch="$arch" -v gov="$gov" -F"\t" 'BEGIN{OFS="\t"}{print os,arch,gov,$0}' \
              >> combined-bench.tsv
          done

      - name: Combine test results
        run: |
          echo -e "os\tarch\tgo-version\tpackage\ttest\taction\telapsed" > combined-tests.tsv
          for file in artifacts/**/tests.tsv; do
            meta=$(dirname "$file" | sed 's|artifacts/results-||')
            os=$(echo $meta | cut -d- -f1)
            arch=$(echo $meta | cut -d- -f2)
            gov=$(echo $meta | cut -d- -f3 | sed 's/Go//')
            tail -n +1 "$file" | tr -d '\r' | \
              awk -v os="$os" -v arch="$arch" -v gov="$gov" -F"\t" 'BEGIN{OFS="\t"}{print os,arch,gov,$0}' \
              >> combined-tests.tsv
          done

      - name: Debug - Show combined results
        run: |
          echo "=== Combined Bench Results ==="
          cat combined-bench.tsv
          echo "=== End Combined Bench Results ==="
          echo ""
          echo "=== Combined Test Results ==="
          cat combined-tests.tsv
          echo "=== End Combined Test Results ==="

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        with:
          name: combined-results
          path: |
            combined-bench.tsv
            combined-tests.tsv
